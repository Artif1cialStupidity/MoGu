# creating docker container
docker run --gpus=all --rm -it -p 8888:8888 -p 8797:8787 -p 8796:8786 --mount type=bind,source=/shared_projects/prediction-poisoning,target=/rapids/notebooks/prediction-poisoning lodivalent/rapids:updated 


# generate randomly initialized surrogate model
python defenses/victim/train.py MNIST lenet --out_path models/victim/MNIST-lenet-train-nodefense-scratch-advproxy --device_id 0 --epochs 1 --train_subset 10 --lr 0.0

python defenses/victim/train.py CIFAR10 vgg16_bn --out_path models/victim/CIFAR10-vgg16_bn-train-nodefense-scratch-advproxy --device_id 0 --epochs 1 --train_subset 10 --lr 0.0


## configs (run in command lines before run the execution commands)

################################ CIFAR-10 ################################
### If you have multiple GPUs on the machine, use this to select the specific GPU
dev_id=7
### p_v = victim model dataset
p_v=CIFAR10
### f_v = architecture of victim model
f_v=vgg16_bn
### queryset = p_a = image pool of the attacker 
queryset=CIFAR100
### Path to victim model's directory (the one downloded earlier)
vic_dir=models/victim/${p_v}-${f_v}-train-nodefense
### No. of images queried by the attacker. With 60k, attacker obtains 99.05% test accuracy on MNIST at eps=0.0.
budget=50000 
### Batch size of queries to process for the attacker
batch_size=32

### attack policy
## pretrained model
# use imagenet pretrained
pretrained=imagenet
# use optimal pretrained
pretrained=${vic_dir}

## random
policy=random
defense_aware=1
policy_suffix="_da${defense_aware}"


## jbda/jbself/jbtop
policy=jbtop3
seedsize=500
epsilon=0.1
T=8
defense_aware=1
policy_suffix="_da${defense_aware}_ss${seedsize}_eps${epsilon}"


### Defense strategy
## Quantization
quantize=1
quantize_epsilon=0.0
optim=approx
frozen=1
quantize_args="epsilon:${quantize_epsilon},ydist:${ydist},optim:${optim},trainingset_name:${p_v},frozen:${frozen}"

## None
strat=none
# Output path to attacker's model
out_dir=models/final_bb_dist/${p_v}-${f_v}-none-quantize${quantize_epsilon}-${queryset}-B${budget}-${policy}${policy_suffix}
# Parameters to defense strategy, provided as a key:value pair string. 
defense_args="out_path:${out_dir}"

## MAD
strat=mad
# Metric for perturbation ball dist(y, y'). Supported = L1, L2, KL
ydist=l1
# Perturbation norm
eps=1.4
# Perturbation mode: extreme|argmax|lp_extreme|lp_argmax
oracle=lp_argmax
# Using Batch Constraint
batch_constraint=0

# Initialization to the defender's surrogate model. 'scratch' refers to random initialization.
proxystate=scratch
# Path to surrogate model
proxydir=models/victim/${p_v}-${f_v}-train-nodefense-${proxystate}-advproxy
# Output path to attacker's model
out_dir=models/final_bb_dist/${p_v}-${f_v}-mad_${oracle}_${ydist}_batch${batch_size}-eps[${eps}_${quantize_epsilon}]_bc${batch_constraint}-${queryset}-B${budget}-proxy_${proxystate}-${policy}${policy_suffix}
# Parameters to defense strategy, provided as a key:value pair string. 
defense_args="epsilon:${eps},batch_constraint:${batch_constraint},objmax:1,oracle:${oracle},ydist:${ydist},model_adv_proxy:${proxydir},out_path:${out_dir}"

# MAD: Use I as jacobian
# Output path to attacker's model
out_dir=models/final_bb_dist/${p_v}-${f_v}-mad_${oracle}_${ydist}_batch${batch_size}-eps[${eps}_${quantize_epsilon}]_bc${batch_constraint}-${queryset}-B${budget}-noproxy-${policy}${policy_suffix}
# Parameters to defense strategy, provided as a key:value pair string. 
defense_args="epsilon:${eps},batch_constraint:${batch_constraint},objmax:1,oracle:${oracle},ydist:${ydist},disable_jacobian:1,out_path:${out_dir}"

## MLD
strat=mld
# Using Batch Constraint
batch_constraint=0
# Metric for perturbation ball dist(y, y'). Supported = L1, L2, KL
ydist=l1
# Perturbation norm
eps=1.0
# Output path to attacker's model
out_dir=models/final_bb_dist/${p_v}-${f_v}-mld_${ydist}_batch${batch_size}-eps[${eps}_${quantize_epsilon}]_bc${batch_constraint}-${queryset}-B${budget}-${policy}${policy_suffix}
# Parameters to defense strategy, provided as a key:value pair string. 
defense_args="epsilon:${eps},batch_constraint:${batch_constraint},ydist:${ydist},out_path:${out_dir}"

## random noise
strat=rand_noise
# Metric for perturbation ball dist(y, y'). Supported = L1, L2, KL
zdist=l1
# Perturbation norm
eps=10.0
# Output path to attacker's model
out_dir=models/final_bb_dist/${p_v}-${f_v}-rand_${zdist}-eps${eps}-${queryset}-B${budget}-${policy}${policy_suffix}
# Parameters to defense strategy, provided as a key:value pair string. 
defense_args="epsilon_z:${eps},dist_z:${zdist},out_path:${out_dir}"

## topk
# Output path to attacker's model
strat=topk
topk=1
rounding=0
out_dir=models/final_bb_dist/${p_v}-${f_v}-top${topk}-rounding${rounding}-quantize${quantize_epsilon}-${queryset}-B${budget}-${policy}${policy_suffix}
defense_args="topk:${topk},rounding:${rounding},out_path:${out_dir}"

## reverse sigmoid
# Output path to attacker's model
strat=reverse_sigmoid
beta=1.0
gamma=0.2
out_dir=models/final_bb_dist/${p_v}-${f_v}-revsig-beta${beta}-gamma${gamma}-${queryset}-B${budget}-${policy}${policy_suffix}
defense_args="beta:${beta},gamma:${gamma},out_path:${out_dir}"

### Execution commands
# (defense) train an original (blackbox) model
python defenses/victim/train.py ${p_v} ${f_v} -o ${vic_dir} -b 128 -d 0 -e 100 -w 4

# (defense) evaluate original model with defense on testset
python defenses/victim/eval.py ${vic_dir} ${strat} ${defense_args} --out_dir ${out_dir} --batch_size ${batch_size} -d ${dev_id}

# (adversary) generate transfer dataset (only when policy=random)
python defenses/adversary/transfer.py ${policy} ${vic_dir} ${strat} ${defense_args} --out_dir ${out_dir} --batch_size ${batch_size} -d ${dev_id} --queryset ${queryset} --budget ${budget} --defense_aware ${defense_aware} --quantize ${quantize} --quantize_args ${quantize_args}

# (adversary) train kickoffnet and evaluate
python defenses/adversary/train.py ${out_dir} ${f_v} ${p_v} --budgets 50000 -e 50 -b 128 -d ${dev_id} -w 4 --pretrained ${pretrained} --vic_dir ${vic_dir} --fix_feat

# (adversary) use jbda/jbda-topk as attack policy
python defenses/adversary/jacobian.py ${policy} ${vic_dir} ${strat} ${defense_args} --model_adv ${f_v} --pretrained imagenet --out_dir ${out_dir} --testset ${p_v} --batch_size 128 -d ${dev_id} --queryset ${queryset} --budget ${budget} --seedsize ${seedsize} --epsilon ${epsilon} --T ${T} --train_epochs 20

